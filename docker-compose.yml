services:
  # Base de datos para el servicio de usuarios
  user-db:
    image: postgres:15-alpine
    container_name: biblioteca-user-db
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - user_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - biblioteca-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de datos para el servicio de libros
  book-db:
    image: postgres:15-alpine
    container_name: biblioteca-book-db
    environment:
      POSTGRES_DB: book_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - book_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - biblioteca-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de datos para el servicio de préstamos
  loan-db:
    image: postgres:15-alpine
    container_name: biblioteca-loan-db
    environment:
      POSTGRES_DB: loan_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - loan_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - biblioteca-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de Usuarios
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: biblioteca-user-service
    environment:
      DB_NAME: user_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: user-db
      DB_PORT: 5432
      DEBUG: "True"
      SECRET_KEY: user-service-secret-key-dev
    ports:
      - "8001:8000"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - biblioteca-network
    volumes:
      - ./user-service:/app
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  # Microservicio de Libros
  book-service:
    build:
      context: ./book-service
      dockerfile: Dockerfile
    container_name: biblioteca-book-service
    environment:
      DB_NAME: book_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: book-db
      DB_PORT: 5432
      DEBUG: "True"
      SECRET_KEY: book-service-secret-key-dev
    ports:
      - "8002:8000"
    depends_on:
      book-db:
        condition: service_healthy
    networks:
      - biblioteca-network
    volumes:
      - ./book-service:/app
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  # Microservicio de Préstamos (Arquitectura Hexagonal)
  loan-service:
    build:
      context: ./loan-service
      dockerfile: Dockerfile
    container_name: biblioteca-loan-service
    environment:
      DB_NAME: loan_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: loan-db
      DB_PORT: 5432
      DEBUG: "True"
      SECRET_KEY: loan-service-secret-key-dev
      USER_SERVICE_URL: http://user-service:8000
      BOOK_SERVICE_URL: http://book-service:8000
    ports:
      - "8003:8000"
    depends_on:
      loan-db:
        condition: service_healthy
      user-service:
        condition: service_started
      book-service:
        condition: service_started
    networks:
      - biblioteca-network
    volumes:
      - ./loan-service:/app
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  # API Gateway (Nginx)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: biblioteca-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_started
      book-service:
        condition: service_started
      loan-service:
        condition: service_started
    networks:
      - biblioteca-network
    restart: unless-stopped


networks:
  biblioteca-network:
    driver: bridge

volumes:
  user_db_data:
  book_db_data:
  loan_db_data:
